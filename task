#!/bin/bash
#
# Title:  rapimid/task
#
# Description:
#   Script to provide monitoring data to an InfluxDB intended to supplement the
#   output provided by Glances. Whilst not specific to Rasberry Pi devices,
#   they are the intended platform.
#
#   This file implements the "task" script required by the r.j2o.it/cron Docker
#   image.
#
# Dependencies:
#   Requires access to /var/run/docker.sock and Cap NET_ADMIN.
#
# Credits:
#   None
#
# Usage:
#   Use standalone, but intended to be executed by a concrete implementation of
#   r.j2o.it/cron. See Dockerfile in this repository for help with that.
#
# Maintainer:
#   James Osborne, dr.j.osborne@gmail.com
#
# License:
#   MIT, see LICENSE file in repoistory root.
#

set -eu
set -o pipefail

# Define the command parameters to apply when this script executes
MONITOR_PARAMS="${MONITORING_PARAMS:--n offset,jitter -d -t -f fail2ban-ssh}"

# Define some defaults if no environment variables set
# Aiming to use the glances.env file
INFLUX_HOST="${INFLUX_HOST:-10.10.20.10}"
INFLUX_PORT="${INFLUX_PORT:-8086}"
INFLUX_USER="${INFLUX_USER:-influx}"
INFLUX_PASS="${INFLUX_PASS:-password}"
INFLUX_DBID="${INFLUX_DBID:-glances}"
INFLUX_PREF="${INFLUX_PREF:-'localhost'}"
INFLUX_TAGS="${INFLUX_TAGS:-'server:docker_def,owner:docker'}"
INFLUX_TIME="${INFLUX_TIME:-30}"

# Change the tags from Grafana format into InfluxDB format
INFLUX_TAGS=${INFLUX_TAGS//:/=}

# NTP constants
NTP_FIELDS=( remote refid st t when poll reach delay offset jitter )
NTP_PATTERN="^[*]"
NTP_CMD=`which ntpq`

# Get system CPU temperature from Raspberry Pi board
# Arguments:
#  None
# Returns
#  echo -- CPU temperature in deg C
function get_temp
{
    local CPU_MILLIS=$(cat /sys/class/thermal/thermal_zone0/temp)
    local CPU_DEGS=$(($CPU_MILLIS/1000))
    local CPU_TENS=$(($CPU_MILLIS/100))
    local CPU_DECIMAL=$(($CPU_TENS % $CPU_MILLIS))

    echo "${CPU_DEGS}.${CPU_DECIMAL}"
}

# Post the specified string to InfluxDB
# Arguments:
#  1 -- The binary data to post
# Returns
#  echo -- output from curl
#  exit -- exit status of curl
function post_to_influx
{
    # TODO: check that we have a parameter & it is non-empty
    curl -XPOST "http://$INFLUX_HOST:$INFLUX_PORT/write?db=$INFLUX_DBID" --data-binary "${1%[[:space:]]}"

    return $?
}

# Function returns the number of containers running on the system. Should work
# both within and outside a container
# Arguments:
#  None
# Returns:
#  echo -- count of containers
function count_containers
{
    # Test if we are in a docker container
    if grep docker /proc/self/cgroup -qa; then
        #  YES - run this command to get container count
        echo $(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/json | grep ]} | jq '.[] | .Id' | wc -l)
    else
        #  NO - use docker ps to count containters
        echo $(docker ps -q | wc -l)
    fi
}

# Returns a string formatted for InfuxDB ingestion containing the user-
# specified NTP monitoring parameters.
# Arguments:
#  1 -- CSV list of NTP fields to retrieve (see $NTP_FIELDS above)
# Returns:
#  echo -- InfluxDB-formatted string of parameters & values
function get_ntp_values
{
    local INFLUX_STR="ntp,$INFLUX_TAGS "
    local CMD_STRING="${1:-offset,jitter}"
    local CUT_STRING=$CMD_STRING

    # Replace the human-readable NTP fields specified by the user in $CUT_STRING
    # with their position numbers in the NTP output
    for (( i = 0 ; i < ${#NTP_FIELDS[@]} ; i++ ))
    do
        CUT_STRING=$( echo $CUT_STRING | sed  -E "s/\<${NTP_FIELDS[$i]}\>/$(($i+1))/" )
    done

    # Query NTP, filter for peer, convert to CSV
    local NTP_STRING=$( $NTP_CMD -p | grep -E "$NTP_PATTERN" | sed -r 's/[[:blank:]]+/,/g' )

    # Create a CSV string containing only the required NTP values and convert
    # into an array
    IFS=',' read -ra ARRAY <<< "$(echo ${NTP_STRING} | cut  -d, -f${CUT_STRING})"

    # Iterate over the strings array, appending the values to INFLUX_STR
    for (( i=0 ; i < ${#ARRAY[@]} ; i++ ))
    do
        INFLUX_STR+="$(echo $CMD_STRING | cut -d, -f$(($i+1)) )=${ARRAY[$i]},"
    done

    # Chomp the trailing , because I can't be bothered to sort the for loop
    echo "${INFLUX_STR%,}"
}

# Executes iptables (hence requires CAP NET_ADMIN in Docker container) to count
# the number of rules in the specified chain.
# Arguments:
#  1 -- The iptables chain to monitor
# Returns:
#  echo - the count of rules in the chain $1
#  exit - the exit status of the command
function get_firewall_rules
{
    local CHAIN=${1:-fail2ban-ssh}
    iptables -v -L $CHAIN -n --line-numbers | sed '/^num\|^$\|^Chain\|.*RETURN.*/d' | wc -l

    return $?
}

# Execute the monitoring functions requested in $MONITORING_PARAMS. Push the
# results directly to the InfuxDB. This is easier than constructing a single
# mult-line string
# Arguments:
#  -- String of options:
#       -d          -- Monitor the number of Docker containers running
#       -f [chain]  -- Monitor the rule count in the iptables chain
#       -n [fields] -- Monitor the ntp fields (CSV list)
#       -t          -- Monitor the system temperature
# Returns
#  exit -- status of last command (which we assume to be the one that failed)
function main
{
    # Let's process the command line flags
    while getopts ":df:n:t" opt; do
        case $opt in
            d) # No argument
                # Docker information
                INFLUX_STR="docker,$INFLUX_TAGS container_count=$(count_containers)"
                post_to_influx "${INFLUX_STR}"
                ;;
            f)
                # Firewall rules
                FIREWALL_ARG="${OPTARG}"
                INFLUX_STR="firewall,$INFLUX_TAGS rule_count=$(get_firewall_rules $FIREWALL_ARG )"
                post_to_influx "${INFLUX_STR}"
                ;;
            n)
                # NTP fields
                NTP_ARG="${OPTARG}"
                post_to_influx "$( get_ntp_values $NTP_ARG )"
                ;;
            t) # No argument
                # Temperature measurement requested
                INFLUX_STR="temp,$INFLUX_TAGS temp=$(get_temp)"
                post_to_influx "${INFLUX_STR}"
                ;;
            \?)
                echo "$SCRIPT: invalid option supplied: -$OPTARG"
                exit 1
                ;;
            :)
                echo "$SCRIPT: -$OPTARG requires an argument"
                exit 1
                ;;
        esac
    done

    return $?
}

# Execute the monitoring actions, we want $MONITOR_PARAMS to expand, so no
# quotes, otherwise main() sees it as a single string in $1
main $MONITOR_PARAMS

exit $?
